with "src/third_party/portable_minimal_ada_rts/rts.gpr";
with "config/hirtos_config.gpr";

project Hirtos is

   for Languages use ("Ada");

   for Runtime ("Ada") use RTS'Runtime ("Ada");

   for Target use RTS'Target;

   for Library_Name use "Hirtos";
   for Library_Version use Project'Library_Name & ".a." & Hirtos_Config.Crate_Version;

   for Source_Dirs use ("src",
                        "src/platform-specific/" & RTS.CPU_Arch);
   for Object_Dir use "obj";
   for Create_Missing_Dirs use "True";
   for Library_Dir use "lib";

   type Library_Type_Type is ("relocatable", "static", "static-pic");
   Library_Type : Library_Type_Type :=
     external ("HIRTOS_LIBRARY_TYPE", external ("LIBRARY_TYPE", "static"));
   for Library_Kind use Library_Type;

   for Library_Standalone use "standard";
   for Library_Interface use ("Hirtos",
                              "Hirtos_Config_Parameters",
                              "Hirtos_Platform_Interface",
                              "Generic_Linked_List",
                              "Generic_Object_Pool"
                             );

   for Library_Auto_Init use "False";

   type Enabled_Kind is ("enabled", "disabled");
   Compile_Checks : Enabled_Kind := External ("HIRTOS_COMPILE_CHECKS", "enabled");
   Runtime_Checks : Enabled_Kind := External ("HIRTOS_RUNTIME_CHECKS", "enabled");
   Style_Checks : Enabled_Kind := External ("HIRTOS_STYLE_CHECKS", "enabled");
   Contracts_Checks : Enabled_Kind := External ("HIRTOS_CONTRACTS", "enabled");

   type Build_Kind is ("debug", "optimize");
   Build_Mode : Build_Kind := External ("HIRTOS_BUILD_MODE", "debug");

   Compile_Checks_Switches := ();
   case Compile_Checks is
      when "enabled" =>
         Compile_Checks_Switches :=
         ("-gnatwa",  -- All warnings
            "-gnatVa",  -- All validity checks
            "-gnatwe"); -- Warnings as errors
      when others => null;
   end case;

   Runtime_Checks_Switches := ();
   case Runtime_Checks is
      when "enabled" => null;
      when others =>
         Runtime_Checks_Switches :=
           ("-gnatp"); -- Suppress checks
   end case;

   Style_Checks_Switches := ();
   case Style_Checks is
      when "enabled" =>
         Style_Checks_Switches :=
           ("-gnatyg",   -- GNAT Style checks
            "-gnaty-d",  -- Disable no DOS line terminators
            "-gnatyM100", -- Maximum line length
            "-gnatyO");  -- Overriding subprograms explicitly marked as such
      when others => null;
   end case;

   Contracts_Switches := ();
   case Contracts_Checks is
      when "enabled" =>
         Contracts_Switches :=
           ("-gnata"); --  Enable assertions and contracts
      when others => null;
   end case;

   Build_Switches := ();
   case Build_Mode is
      when "optimize" =>
         Build_Switches := ("-O3",     -- Optimization
                            "-gnatn"); -- Enable inlining
      when "debug" =>
         Build_Switches := ("-g",   -- Debug info
                            "-Og"); -- No optimization
   end case;

   package Compiler is
      for Default_Switches ("Ada") use
        Compile_Checks_Switches &
        Build_Switches &
        Runtime_Checks_Switches &
        Style_Checks_Switches &
        Contracts_Switches &
        ("-gnatw.X", -- Disable warnings for No_Exception_Propagation
         "-gnatQ",   -- Don't quit. Generate ALI and tree files even if illegalities
	  "-fstack-usage",
	  -- "-fstack-check", --  Generate stack checking code
          "-gnato13",         --  Overflow checking            (part of Ada)
          "-gnatf",           --  Full, verbose error messages
	  "-gnat12",
          "-gnat2012");       --  Use Ada 2012

      for Local_Configuration_Pragmas use "src/gnat_pragmas.adc";
   end Compiler;

   package Binder is
      for Switches ("Ada") use ("-Es"); --  Symbolic traceback
   end Binder;

end Hirtos;
